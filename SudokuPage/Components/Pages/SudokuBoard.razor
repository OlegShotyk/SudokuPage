@page "/sudokuboard"
<div class="right" style="text-align:right;">
    <a href="sudokuinfo" target="_blank">About</a>
</div>
<h3>Sudoku solver</h3>
<label>Please enter your sudoku board:</label>
<table class="table-bordered" width="450" height="100" style="border-color:black;">
    
    @foreach(BoardRow row in BoardRows)
    {
        <tr align="center">
            @foreach(BoardElement element in row.RowElements)
            {
                <td width="50" height="50"><select class="form-control" type="text" @oninput="ValidateElement(element.Id, element.Value)" @bind="element.Value" maxlength="1"style="place-items:right; margin-right:5px; background-color:@element.CellColor.ToString(); border-color:black; font-weight:@element.FontWeight; width: 97%; height: 97%; text-align-last:center; padding-right:12px;">
                        <optgroup style="background-color:white;">
                            <option selected disabled hidden value=""></option>
                            <option @onchange="NullValueSelected(element.Id)" hidden="@(element.IsReadonly)">Clear</option>
                            <option hidden="@(element.IsReadonly)" value="1">1</option>
                            <option hidden="@(element.IsReadonly)" value="2">2</option>
                            <option hidden="@(element.IsReadonly)" value="3">3</option>
                            <option hidden="@(element.IsReadonly)" value="4">4</option>
                            <option hidden="@(element.IsReadonly)" value="5">5</option>
                            <option hidden="@(element.IsReadonly)" value="6">6</option>
                            <option hidden="@(element.IsReadonly)" value="7">7</option>
                            <option hidden="@(element.IsReadonly)" value="8">8</option>
                            <option hidden="@(element.IsReadonly)" value="9">9</option>
                        </optgroup>
                </select></td>
            }
        </tr>
    }
</table>

<label style="width: 310px; text-align: left; font-size: 17px; font-family: bold; color: red;">@errorMessage </label>
<label style="width: 310px; text-align: left; font-size: 17px; font-family: bold; color: green;">@message </label>
<div>
    <td>
        <label style="font-size:18px; font-weight:semi-bold;">Please select game difficulty:</label><select @bind="hiddenValuesCount">
          <optgroup>
              <option selected value="20">Easy</option>
              <option value="9" >Normal</option>
              <option value="7">Hard</option>
          </optgroup>
        </select>
    </td>
</div>

<td>
    <button @onclick="SolveSudoku" style="width: 120px; height: 40px; margin: 15px;">Solve sudoku</button>
    <button @onclick="ClearBoard" style="width: 120px; height: 40px; margin: 15px;">Clear board</button>
    <button @onclick="GenerateGame" style="width: 120px; height: 40px; margin: 15px;">New game</button>
    <button @onclick="CheckSudoku" style="width: 120px; height: 40px; margin: 15px;">Check sudoku</button>
</td>

@code {
    [Parameter] public List<BoardRow> BoardRows { get; set; }
    private const int boardSize = 9;
    private const int squareSize = 3;
    private string errorMessage;
    private string message;
    private int hiddenValuesCount = 20;

    private EventCallback ValidateElement(int id, string input)
    {
        if(string.IsNullOrEmpty(input))
        {
            return EventCallback.Empty;
        }
        if(!int.TryParse(input, out int validInput))
        {
            if(input != "Clear")
            {
                errorMessage = "Warning: only numbers are allowed on input!";
            }
            foreach(BoardRow row in BoardRows)
            {
                foreach (BoardElement element in row.RowElements)
                {
                    if (element.Id == id)
                    {
                        element.Value = "";
                        element.CellColor = BoardElement.CellColors.white;
                        break;
                    }
                }
            }
        }
        return EventCallback.Empty;
    }

    private EventCallback NullValueSelected(int elementId)
    {
        foreach(BoardRow row in BoardRows)
        {
            foreach(BoardElement element in row.RowElements)
            {
                if(element.Id == elementId && !int.TryParse(element.Value, out int elementValue))
                {
                    element.Value = "";
                    break;
                }
            }
        }
        return EventCallback.Empty;
    }

    private void ClearBoard()
    {
        foreach (BoardRow row in BoardRows)
        {
            foreach (BoardElement element in row.RowElements)
            {
                element.Value = "";
                element.IsReadonly = false;
                element.FontWeight = 400;
                element.CellColor = BoardElement.CellColors.white;
            }
        }
        errorMessage = "";
        message = "";
    }

    private void GenerateGame()
    {
        ClearBoard();
        errorMessage = "";
        message = "";
        bool sucessfulGeneration = false;
        while (!sucessfulGeneration)
        {
            BoardGenerator generator = new BoardGenerator();
            generator.Board = BoardRows;
            List<BoardRow> generatedGame = generator.NewGame(hiddenValuesCount);

            int[][] board = ConvertBoard(generatedGame);
            BoardRequest validationRequest = new BoardRequest();
            validationRequest.board = board;
            var client = new HttpClient();
            client.BaseAddress = new Uri("https://sudoku-solver-api-b9ccb9hce0geevc5.westeurope-01.azurewebsites.net/api/SolveSudoku/");
            string jsonRequest = JsonSerializer.Serialize(validationRequest);
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");
            var response = client.PostAsync(client.BaseAddress, content).Result;
            if (response.IsSuccessStatusCode)
            {
                sucessfulGeneration = true;
                BoardRows = generatedGame;
                foreach (BoardRow row in BoardRows)
                {
                    foreach (BoardElement element in row.RowElements)
                    {
                        if(element.Value != "")
                        {
                            element.IsReadonly = true;
                            element.FontWeight = 700;
                        }
                    }
                }
                break;
            }
        }

    }

    private void CheckSudoku()
    {
        foreach (BoardRow row in BoardRows)
        {
            for (int rowElement = 0; rowElement < boardSize; rowElement++)
            {
                if (row.RowElements[rowElement].Value == "")
                {
                    row.RowElements[rowElement].CellColor = BoardElement.CellColors.white;
                }
                else if (!row.RowElements[rowElement].IsReadonly)
                {
                    row.RowElements[rowElement].CellColor = BoardElement.CellColors.white;

                    foreach (BoardElement checkedEement in row.RowElements)
                    {
                        if (checkedEement != row.RowElements[rowElement] && checkedEement.Value == row.RowElements[rowElement].Value)
                        {
                            row.RowElements[rowElement].CellColor = BoardElement.CellColors.red;
                        }
                    }

                    foreach(BoardRow checkedRow in BoardRows)
                    {
                        if (checkedRow != row && checkedRow.RowElements[rowElement].Value == row.RowElements[rowElement].Value)
                        {
                            row.RowElements[rowElement].CellColor = BoardElement.CellColors.red;
                        }
                    }

                    int startRow = row.Id - row.Id % squareSize;
                    int startCol = rowElement - rowElement % squareSize;
                    for (int squareWidth = 0; squareWidth < 3; squareWidth++)
                    {
                        for (int squareHeight = 0; squareHeight < 3; squareHeight++)
                        {
                            if (BoardRows[squareWidth + startRow].RowElements[squareHeight + startCol].Value == row.RowElements[rowElement].Value && BoardRows[squareWidth + startRow].RowElements[squareHeight + startCol] != row.RowElements[rowElement])
                            {
                                row.RowElements[rowElement].CellColor = BoardElement.CellColors.red;
                            }
                        }
                    }

                }
            }
        }
    }

    private int[][] ConvertBoard(List<BoardRow> boardRows)
    {
        int[][] convertedBoard = new int[boardSize][];
        foreach(BoardRow row in boardRows)
        {
            int elementIndex = 0;
            int[] convertedRow = new int[boardSize];
            foreach(BoardElement element in row.RowElements)
            {
                if (string.IsNullOrEmpty(element.Value))
                {
                    element.Value = "";
                    convertedRow[elementIndex] = 0;
                }
                else
                {
                    convertedRow[elementIndex] = int.Parse(element.Value);
                }
                elementIndex++;
            }
            convertedBoard[row.Id] = convertedRow;
        }
        return convertedBoard;
    }

    private void SolveSudoku()
    {
        string unsolvableMsg = "Warning: Some of the numbers are incorrect.";
        message = "";
        int[][] board = ConvertBoard(BoardRows);
        BoardRequest request = new BoardRequest();
        request.board = board;
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://sudoku-solver-api-b9ccb9hce0geevc5.westeurope-01.azurewebsites.net/api/SolveSudoku/");
        string jsonRequest = JsonSerializer.Serialize(request);
        var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");
        var response = client.PostAsync(client.BaseAddress, content).Result;
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = unsolvableMsg;
            return;
        }
        else
        {
            errorMessage = "";
            message = "Sudoku was solved sucessfully.";
            BoardRequest result = JsonSerializer.Deserialize<BoardRequest>(response.Content.ReadAsStringAsync().Result);
            foreach (BoardRow row in BoardRows)
            {
                int elementIndex = 0;
                foreach (BoardElement element in row.RowElements)
                {
                    element.Value = result.board[row.Id][elementIndex].ToString();
                    elementIndex++;
                }
            }
        }

    }

    protected override async void OnInitialized()
    {
        BoardRows = new List<BoardRow>();
        int boardElementCount = 0;
        for (int rowCount = 0; rowCount < boardSize; rowCount++)
        {
            BoardRow newRow = new BoardRow();
            newRow.Id = rowCount;

            while(newRow.RowElements.Count < boardSize)
            {
                BoardElement newElement = new BoardElement();
                newElement.Id = boardElementCount;
                newElement.CellColor = BoardElement.CellColors.white;
                newElement.IsReadonly = false;
                newElement.FontWeight = 400;
                newElement.Value = "";
                boardElementCount++;
                newRow.RowElements.Add(newElement);
            }

            BoardRows.Add(newRow);
        }
    }

}