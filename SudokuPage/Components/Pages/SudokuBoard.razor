<h3>Sudoku solver</h3>
<label>Please enter your sudoku problem:</label>
<table class="table-bordered" width="480" height="100">
    
    @foreach(BoardRow row in BoardRows)
    {
        <tr align="center">
            @foreach(BoardElement element in row.RowElements)
            {
                <td width="50" height="50"><input class="text-center" type="number" list="options" min="1" max="9" @oninput="ValidateElement(element.Id, element.Value)" @bind-value="element.Value" maxlength="1" style="place-items:center; width: 100%; height: 100%; text-align:center;" /></td>
            }
        </tr>
    }
</table>

<label style="width: 310px; text-align: left; font-size: 17px; font-family: bold; color: red;">@errorMessage </label>
<label style="width: 310px; text-align: left; font-size: 17px; font-family: bold; color: green;">@message </label>

<td>
    <button @onclick="SolveSudoku" style="width: 120px; height: 40px; margin: 15px;">Solve sudoku</button>
    <button @onclick="ClearBoard" style="width: 120px; height: 40px; margin: 15px;">Clear board</button>
    <button @onclick="GenerateGame" style="width: 120px; height: 40px; margin: 15px;">New game</button>
    <button @onclick="CheckSudoku" style="width: 120px; height: 40px; margin: 15px;">Check sudoku</button>
</td>

<datalist id="options">
    <option value="1"></option>
    <option value="2"></option>
    <option value="3"></option>
    <option value="4"></option>
    <option value="5"></option>
    <option value="6"></option>
    <option value="7"></option>
    <option value="8"></option>
    <option value="9"></option>
</datalist>

@code {
    [Parameter] public List<BoardRow> BoardRows { get; set; }
    private const int boardSize = 9;
    private const int squareSize = 3;
    private string errorMessage;
    private string message;

    private EventCallback ValidateElement(int id, string input)
    {
        if(string.IsNullOrEmpty(input))
        {
            return EventCallback.Empty;
        }
        if(!int.TryParse(input, out int validInput))
        {
            errorMessage = "Warning: only numbers are allowed on input!";
            foreach(BoardRow row in BoardRows)
            {
                foreach (BoardElement element in row.RowElements)
                {
                    if (element.Id == id)
                    {
                        element.Value = "";
                        break;
                    }
                }
            }
        }
        return EventCallback.Empty;
    }

    private void ClearBoard()
    {
        foreach (BoardRow row in BoardRows)
        {
            foreach (BoardElement element in row.RowElements)
            {
                element.Value = "";
            }
        }
        errorMessage = "";
        message = "";
    }

    private void GenerateGame()
    {
        errorMessage = "";
        message = "";
        bool sucessfulGeneration = false;
        while (!sucessfulGeneration)
        {
            BoardGenerator generator = new BoardGenerator();
            generator.Board = BoardRows;
            List<BoardRow> generatedGame = generator.NewGame();

            int[][] board = ConvertBoard(generatedGame);
            BoardRequest validationRequest = new BoardRequest();
            validationRequest.board = board;
            var client = new HttpClient();
            client.BaseAddress = new Uri("https://sudoku-solver-api-b9ccb9hce0geevc5.westeurope-01.azurewebsites.net/api/SolveSudoku/");
            string jsonRequest = JsonSerializer.Serialize(validationRequest);
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");
            var response = client.PostAsync(client.BaseAddress, content).Result;
            if (response.IsSuccessStatusCode)
            {
                sucessfulGeneration = true;
                BoardRows = generatedGame;
                break;
            }
        }

    }

    private void CheckSudoku()
    {
        foreach (BoardRow row in BoardRows)
        {
            foreach (BoardElement element in row.RowElements)
            {
                if (string.IsNullOrEmpty(element.Value) || element.Value == "0")
                {
                    errorMessage = "Warning: you haven't filled all numbers yet.";
                    return;
                }
            }
        }

        SolveSudoku();

    }

    private int[][] ConvertBoard(List<BoardRow> boardRows)
    {
        int[][] convertedBoard = new int[boardSize][];
        foreach(BoardRow row in boardRows)
        {
            int elementIndex = 0;
            int[] convertedRow = new int[boardSize];
            foreach(BoardElement element in row.RowElements)
            {
                if (string.IsNullOrEmpty(element.Value))
                {
                    element.Value = "";
                    convertedRow[elementIndex] = 0;
                }
                else
                {
                    convertedRow[elementIndex] = int.Parse(element.Value);
                }
                elementIndex++;
            }
            convertedBoard[row.Id] = convertedRow;
        }
        return convertedBoard;
    }

    private void SolveSudoku()
    {
        string unsolvableMsg = "Warning: This problem is unable to solve.";
        message = "";
        int[][] board = ConvertBoard(BoardRows);
        BoardRequest request = new BoardRequest();
        request.board = board;
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://sudoku-solver-api-b9ccb9hce0geevc5.westeurope-01.azurewebsites.net/api/SolveSudoku/");
        string jsonRequest = JsonSerializer.Serialize(request);
        var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");
        var response = client.PostAsync(client.BaseAddress, content).Result;
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = unsolvableMsg;
            return;
        }
        else
        {
            errorMessage = "";
            message = "Sudoku was solved sucessfully.";
            BoardRequest result = JsonSerializer.Deserialize<BoardRequest>(response.Content.ReadAsStringAsync().Result);
            foreach (BoardRow row in BoardRows)
            {
                int elementIndex = 0;
                foreach (BoardElement element in row.RowElements)
                {
                    element.Value = result.board[row.Id][elementIndex].ToString();
                    elementIndex++;
                }
            }
        }

    }

    protected override async void OnInitialized()
    {
        BoardRows = new List<BoardRow>();
        int boardElementCount = 0;
        for (int rowCount = 0; rowCount < boardSize; rowCount++)
        {
            BoardRow newRow = new BoardRow();
            newRow.Id = rowCount;

            while(newRow.RowElements.Count < boardSize)
            {
                BoardElement newElement = new BoardElement();
                newElement.Id = boardElementCount;
                boardElementCount++;
                newRow.RowElements.Add(newElement);
            }

            BoardRows.Add(newRow);
        }
    }

}